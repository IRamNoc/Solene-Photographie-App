version: '3.8'

services:
  solene-photo-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solene-photo-app
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Service optionnel pour reverse proxy avec SSL (Traefik)
  # traefik:
  #   image: traefik:v2.10
  #   container_name: solene-traefik
  #   command:
  #     - "--api.insecure=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
  #     - "--certificatesresolvers.letsencrypt.acme.email=votre-email@example.com"
  #     - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - letsencrypt_data:/letsencrypt
  #   networks:
  #     - solene-network

  # Service optionnel pour une base de donn√©es de production
  # postgres-prod:
  #   image: postgres:15-alpine
  #   container_name: solene-postgres-prod
  #   environment:
  #     POSTGRES_DB: solene_photo_prod
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
  #   volumes:
  #     - postgres_prod_data:/var/lib/postgresql/data
  #   networks:
  #     - solene-network
  #   secrets:
  #     - postgres_password
  #   restart: unless-stopped

networks:
  solene-network:
    driver: bridge

# volumes:
#   postgres_prod_data:
#     driver: local
#   letsencrypt_data:
#     driver: local

# secrets:
#   postgres_password:
#     file: ./secrets/postgres_password.txt
# Multi-stage build pour optimiser la taille de l'image de production

# Stage 1: Build
FROM node:18-alpine AS builder

# Installer les dépendances système nécessaires
RUN apk add --no-cache libc6-compat

# Définir le répertoire de travail
WORKDIR /app

# Copier les fichiers de configuration des dépendances
COPY package*.json ./

# Installer les dépendances
RUN npm ci --only=production && npm cache clean --force

# Copier le code source
COPY . .

# Accepter les arguments de build
ARG VITE_API_URL
ENV VITE_API_URL=$VITE_API_URL

# Build de l'application pour la production
RUN npm run build

# Stage 2: Production
FROM nginx:alpine AS production

# Installer curl pour les health checks
RUN apk add --no-cache curl

# Copier la configuration Nginx personnalisée
COPY nginx-app.conf /etc/nginx/conf.d/default.conf

# Copier les fichiers buildés depuis le stage builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Créer un utilisateur non-root pour la sécurité
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Changer les permissions
RUN chown -R nextjs:nodejs /usr/share/nginx/html && \
    chown -R nextjs:nodejs /var/cache/nginx && \
    chown -R nextjs:nodejs /var/log/nginx && \
    chown -R nextjs:nodejs /etc/nginx/conf.d

# Créer les répertoires nécessaires avec les bonnes permissions
RUN touch /var/run/nginx.pid && \
    chown -R nextjs:nodejs /var/run/nginx.pid

# Exposer le port
EXPOSE 3000

# Utiliser l'utilisateur non-root
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

# Commande de démarrage
CMD ["nginx", "-g", "daemon off;"]